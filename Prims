#include <stdio.h>
#include <limits.h>

#define MAX 20

int selectMinVertex(int key[], int mstSet[], int total_vertices) {
    int min = INT_MAX;
    int minIndex = 0;

    for (int i = 0; i < total_vertices; i++) {
        if (mstSet[i] == 0 && key[i] < min) {
            min = key[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void prims(int graph[MAX][MAX], int total_vertices) {
    int parent[MAX];   // To store the MST
    int key[MAX];      // Key values to pick the minimum weight edge
    int mstSet[MAX];   // To represent the vertices included in MST

    // Initialize all keys as infinity and mstSet as false
    for (int i = 0; i < total_vertices; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // Start from the first vertex
    key[0] = 0;        // Pick the first vertex first
    parent[0] = -1;    // First vertex is the root of the MST

    // The MST will have exactly total_vertices - 1 edges
    for (int i = 0; i < total_vertices - 1; i++) {
        int u = selectMinVertex(key, mstSet, total_vertices);
        mstSet[u] = 1;  // Include the picked vertex in MST

        // Update the key and parent of adjacent vertices
        for (int v = 0; v < total_vertices; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the MST
    printf("Prim's MST:\n");
    for (int i = 1; i < total_vertices; i++) {
        printf("Edge: %d - %d, Weight: %d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int total_vertices;

    printf("Enter the number of vertices: ");
    scanf("%d", &total_vertices);

    int graph[MAX][MAX];

    // Input graph adjacency matrix
    printf("Enter the adjacency matrix (enter 0 if no edge between vertices):\n");
    for (int i = 0; i < total_vertices; i++) {
        for (int j = 0; j < total_vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Perform Prim's algorithm
    prims(graph, total_vertices);

    return 0;
}
