#include <stdio.h>
#define MAX 100
#define INF 9999

void primAlgorithm(int costMatrix[MAX][MAX], int numNodes) {
    int selected[MAX] = {0}; // Array to track selected nodes
    int totalCost = 0;       // Total cost of the minimum spanning tree
    int edgeCount = 0;       // To track the number of edges added

    // Start from the first node (node 0)
    selected[0] = 1;

    printf("Edges in the Minimum Spanning Tree:\n");

    while (edgeCount < numNodes - 1) {
        int minCost = INF;
        int start = -1, end = -1;

        // Find the minimum cost edge connecting a selected node to an unselected node
        for (int i = 0; i < numNodes; i++) {
            if (selected[i]) {
                for (int j = 0; j < numNodes; j++) {
                    if (!selected[j] && costMatrix[i][j] < minCost) {
                        minCost = costMatrix[i][j];
                        start = i;
                        end = j;
                    }
                }
            }
        }

        // Select the edge and add it to the tree
        selected[end] = 1;
        totalCost += minCost;
        edgeCount++;

        printf("Edge %d: (%d -> %d) Cost: %d\n", edgeCount, start, end, minCost);
    }

    printf("Total cost of Minimum Spanning Tree: %d\n", totalCost);
}

int main() {
    int numNodes;
    int costMatrix[MAX][MAX];

    printf("Enter the number of nodes: ");
    scanf("%d", &numNodes);

    printf("Enter the cost matrix (use 9999 for no direct edge):\n");
    for (int i = 0; i < numNodes; i++) {
        for (int j = 0; j < numNodes; j++) {
            scanf("%d", &costMatrix[i][j]);
        }
    }

    primAlgorithm(costMatrix, numNodes);

    return 0;
}
